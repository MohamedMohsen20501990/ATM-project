from abc import ABC,abstractmethod
import datetime

class Bank:
    def __init__(self, name, bank_swift_code):
        self.name = name
        self.bank_swift_code = bank_swift_code
        self.customers = []
        
    def add_customer(self, customer):
        self.customers.append(customer)    

class Customer:
    def __init__(self, name, address, phone_number, email):
        self.name = name
        self.address = address
        self.phone_number = phone_number
        self.email = email
        self.accounts = []
    
    def add_account(self, account):
        self.accounts.append(account)    

class Account:
    def __init__(self, account_number):
        self.account_number = account_number
        self.balance = 0
        self.linked_card = None
        self.transaction_history = []
    
    def link_card(self,card):
        self.linked_card= card    
    
    def add_transaction(self, transaction):
        self.transaction_history.append(transaction)    


class Card:
    def __init__(self, number, pin):
        self.number = number
        self.pin = pin

class Atm:
    def __init__(self, bank, atm_location):
        self.bank = bank
        self.atm_location = atm_location
        
    def insert_card(self, card):
        pin = input("Please enter yout PIN code")
        
        
        
class Transaction(ABC):
    transaction_counter = 0
    def __init__(self, transaction_type, amount=None):
        self.transaction_id = Transaction.transaction_counter
        self.timestamp = datetime.datetime.now()
        Transaction.transaction_counter +=1
        self.transaction_type = transaction_type
        self.amount = amount
        
    @abstractmethod
    def execute(self):
        pass     
    
class withdrawTransaction(Transaction):
    def __init__(self, amount):
        super().__init__("withdraw", amount)
        self.amount = amount
    # polymorphism
    def execute(self, account):
        if account.balance >= self.amount:
            account.balance -= self.amount
            print(f"withdrawl successful, you new balance {account.balance}")
            account.add_transaction(self)
        else:
            print("Insufficent funds")

class depositTransaction(Transaction):
    def __init__(self, amount):
        super().__init__("deposit", amount)
        self.amount = amount
        
    def execute(self, account):
        account.balance += self.amount
        print(f"Deposit successful, you new balance {account.balance}")
        account.add_transaction(self)
        
class balanceInquiry(Transaction):
    def __init__(self):
        super().__init__("balance inquiry")
        
    def execute(self,account):
        print(f"your balance is {account.balance}")
        account.add_transaction(self)
        
        
my_bank = Bank("HSBC", "HSBCEGYPTXXX")
customer_1 =Customer("omar", "42 boulak eldakror", "0121436242", "omar_gmail.com")
account_1 = Account("12345")

customer_1.add_account(account_1)      
my_bank.add_customer(customer_1)

print(my_bank.customers[0].name)
print(customer_1.accounts)  
        
card_1 = Card("1255544665888", "1111") 
account_1.link_card(card_1)
print(account_1.linked_card.number)       
    
            
        
        
                             
        
                
        
