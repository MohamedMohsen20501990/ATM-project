from abc import ABC,abstractmethod
import datetime

class Bank:
    def __init__(self, name, bank_swift_code):
        self.name = name
        self.bank_swift_code = bank_swift_code
        self.customers = []
        
    def add_customer(self, customer):
        self.customers.append(customer)    
        
    def authenticate(self, card_number, pin):
        for customer in self.customers:
            for account in customer.accounts:
                if account.linked_card.number == card_number and account.linked_card.pin == pin:
                    return account
        return None          

class Customer:
    def __init__(self, name, address, phone_number, email):
        self.name = name
        self.address = address
        self.phone_number = phone_number
        self.email = email
        self.accounts = []
    
    def add_account(self, account):
        self.accounts.append(account)    

class Account:
    def __init__(self, account_number):
        self.account_number = account_number
        self.balance = 0
        self.linked_card = None
        self.transaction_history = []
    
    def link_card(self,card):
        self.linked_card= card    
    
    def add_transaction(self, transaction):
        self.transaction_history.append(transaction)   
    
    def display_transaction_history(self):
        if not self.transaction_history:
            print("No transactions available")
            return
        
        for transaction in self.transaction_history:
            print(transaction.transaction_id, transaction.transaction_type, transaction.amount, transaction.timestamp)     


class Card:
    def __init__(self, number, pin):
        self.number = number
        self.pin = pin

class ATM:
    def __init__(self, bank, atm_location):
        self.bank = bank
        self.atm_location = atm_location
        
    def insert_card(self, card):
        pin = input("Please enter yout PIN code: ")
        account = self.bank.authenticate(card.number, pin)
        if account:
            self.display_main_menu(account)
        else:
            print("Invalid card or PIN")
            return None 
        
    def display_main_menu(self, account):
        message = """
        1. Withdraw
        2. Deposit
        3. Balance Inquiry
        4. View Transactions
        5. Exit
        Choose an option: """
        while True:
            choice = input(message)
            if choice == "5":
                print("Card Ejecting .... ")
                print("GOODBYE")
                break 
            self.handle_transaction(choice, account)
                    
    def handle_transaction(self, choice, account):
        transaction = None
        try:
            match choice:
                case "1":
                    amount = int(input("Enter amount to withdraw: "))
                    transaction  = WithdrawTransaction(amount)
                case "2":
                    amount = int(input("Enter amount to Deposit: "))
                    transaction  = DepositTransaction(amount)
                case "3":
                    transaction = BalanceInquiry()
                case "4":
                    account.display_transaction_history()
                case _:
                    print("Invalid Choice")  
            if transaction:         
                transaction.execute(account)  # perfect exapmle of the polymorphism principle          
        except ValueError:
            print("Invalid amount enteredn Please try again. ")
                        
                
                
        
        
        
class Transaction(ABC):
    transaction_counter = 0
    def __init__(self, transaction_type, amount=None):
        self.transaction_id = Transaction.transaction_counter
        self.timestamp = datetime.datetime.now()
        Transaction.transaction_counter +=1
        self.transaction_type = transaction_type
        self.amount = amount
        
    @abstractmethod
    def execute(self):
        pass     
    
class WithdrawTransaction(Transaction):
    def __init__(self, amount):
        super().__init__("withdraw", amount)
        self.amount = amount
    # polymorphism
    def execute(self, account):
        if account.balance >= self.amount:
            account.balance -= self.amount
            print(f"withdrawl successful, you new balance {account.balance}")
            account.add_transaction(self)
        else:
            print("Insufficent funds")

class DepositTransaction(Transaction):
    def __init__(self, amount):
        super().__init__("deposit", amount)
        self.amount = amount
        
    def execute(self, account):
        account.balance += self.amount
        print(f"Deposit successful, you new balance {account.balance}")
        account.add_transaction(self)
        
class BalanceInquiry(Transaction):
    def __init__(self):
        super().__init__("balance inquiry")
        
    def execute(self,account):
        print(f"your balance is {account.balance}")
        account.add_transaction(self)
        
        
my_bank = Bank("HSBC", "HSBCEGYPTXXX")
customer_1 =Customer("omar", "42 boulak eldakror", "0121436242", "omar_gmail.com")
account_1 = Account("12345")

customer_1.add_account(account_1)      
my_bank.add_customer(customer_1)

print(my_bank.customers[0].name)
print(customer_1.accounts)  
        
card_1 = Card("1255544665888", "1111") 
account_1.link_card(card_1)
print(account_1.linked_card.number)       
print(account_1.linked_card.pin)    

atm = ATM(my_bank, "Elgiza")
atm.insert_card(card_1)
    
            
        
        
                             
        
                
        
